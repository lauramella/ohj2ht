package music2.test;
// Generated by ComTest BEGIN
import music2.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.19 22:12:07 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KappaleetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa67 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa67() throws SailoException {    // Kappaleet: 67
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(); 
    assertEquals("From: Kappaleet line: 71", 0, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 72", 1, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale2); assertEquals("From: Kappaleet line: 73", 2, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 74", 3, kappaleet.getLkm()); 
    Iterator<Kappale> it = kappaleet.iterator(); 
    assertEquals("From: Kappaleet line: 76", kappale1, it.next()); 
    assertEquals("From: Kappaleet line: 77", kappale2, it.next()); 
    assertEquals("From: Kappaleet line: 78", kappale1, it.next()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 79", 4, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 80", 5, kappaleet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa183 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa183() throws SailoException,CloneNotSupportedException {    // Kappaleet: 183
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(); 
    kappale1.rekisteroi(); kappale2.rekisteroi(); 
    assertEquals("From: Kappaleet line: 189", 0, kappaleet.getLkm()); 
    kappaleet.korvaaTaiLisaa(kappale1); assertEquals("From: Kappaleet line: 190", 1, kappaleet.getLkm()); 
    kappaleet.korvaaTaiLisaa(kappale2); assertEquals("From: Kappaleet line: 191", 2, kappaleet.getLkm()); 
    Kappale kappale3 = kappale1.clone(); 
    kappale3.aseta(3,"kkk"); 
    Iterator<Kappale> it = kappaleet.iterator(); 
    assertEquals("From: Kappaleet line: 195", true, it.next() == kappale1); 
    kappaleet.korvaaTaiLisaa(kappale3); assertEquals("From: Kappaleet line: 196", 2, kappaleet.getLkm()); 
    it = kappaleet.iterator(); 
    Kappale k0 = it.next(); 
    assertEquals("From: Kappaleet line: 199", kappale3, k0); 
    assertEquals("From: Kappaleet line: 200", true, k0 == kappale3); 
    assertEquals("From: Kappaleet line: 201", false, k0 == kappale1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKappaleetIterator220 
   * @throws SailoException when error
   */
  @Test
  public void testKappaleetIterator220() throws SailoException {    // Kappaleet: 220
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(); 
    kappale1.rekisteroi(); kappale2.rekisteroi(); 
    kappaleet.lisaa(kappale1); 
    kappaleet.lisaa(kappale2); 
    kappaleet.lisaa(kappale1); 
    StringBuilder ids = new StringBuilder(30); 
    for (Kappale kappale:kappaleet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+kappale.getTunnusNro()); 
    String tulos = " " + kappale1.getTunnusNro() + " " + kappale2.getTunnusNro() + " " + kappale1.getTunnusNro(); 
    assertEquals("From: Kappaleet line: 239", tulos, ids.toString()); 
    ids = new StringBuilder(30); 
    for (Iterator<Kappale>  i=kappaleet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Kappale kappale = i.next(); 
    ids.append(" "+kappale.getTunnusNro()); 
    }
    assertEquals("From: Kappaleet line: 247", tulos, ids.toString()); 
    Iterator<Kappale>  i=kappaleet.iterator(); 
    assertEquals("From: Kappaleet line: 250", true, i.next() == kappale1); 
    assertEquals("From: Kappaleet line: 251", true, i.next() == kappale2); 
    assertEquals("From: Kappaleet line: 252", true, i.next() == kappale1); 
    try {
    i.next(); 
    fail("Kappaleet: 254 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi312 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi312() throws SailoException {    // Kappaleet: 312
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(); kappale1.parse("1|Alex|This For B|Vinyl|"); 
    Kappale kappale2 = new Kappale(); kappale2.parse("2|Guy From Downstairs||Vinyl|"); 
    Kappale kappale3 = new Kappale(); kappale3.parse("3|Sebastian Eric|Not This Time||Tzinah Records|130"); 
    Kappale kappale4 = new Kappale(); kappale4.parse("4|Runy|Ice Queen|digi"); 
    Kappale kappale5 = new Kappale(); kappale5.parse("5|Robag Wruhme|Yes|Digi"); 
    kappaleet.lisaa(kappale1); kappaleet.lisaa(kappale2); kappaleet.lisaa(kappale3); kappaleet.lisaa(kappale4); kappaleet.lisaa(kappale5); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId342 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId342() throws SailoException {    // Kappaleet: 342
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(), kappale3 = new Kappale(); 
    kappale1.rekisteroi(); kappale2.rekisteroi(); kappale3.rekisteroi(); 
    int id1 = kappale1.getTunnusNro(); 
    kappaleet.lisaa(kappale1); kappaleet.lisaa(kappale2); kappaleet.lisaa(kappale3); 
    assertEquals("From: Kappaleet line: 349", 1, kappaleet.etsiId(id1+1)); 
    assertEquals("From: Kappaleet line: 350", 2, kappaleet.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista367 
   * @throws SailoException when error
   */
  @Test
  public void testPoista367() throws SailoException {    // Kappaleet: 367
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(), kappale3 = new Kappale(); 
    kappale1.rekisteroi(); kappale2.rekisteroi(); kappale3.rekisteroi(); 
    int id1 = kappale1.getTunnusNro(); 
    kappaleet.lisaa(kappale1); kappaleet.lisaa(kappale2); kappaleet.lisaa(kappale3); 
    assertEquals("From: Kappaleet line: 374", 1, kappaleet.poista(id1+1)); 
    assertEquals("From: Kappaleet line: 375", null, kappaleet.kappaleTunnus(id1+1)); assertEquals("From: Kappaleet line: 375", 2, kappaleet.getLkm()); 
    assertEquals("From: Kappaleet line: 376", 1, kappaleet.poista(id1)); assertEquals("From: Kappaleet line: 376", 1, kappaleet.getLkm()); 
    assertEquals("From: Kappaleet line: 377", 0, kappaleet.poista(id1+3)); assertEquals("From: Kappaleet line: 377", 1, kappaleet.getLkm()); 
  } // Generated by ComTest END
}