package music2.test;
// Generated by ComTest BEGIN
import music2.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.03 14:49:51 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KappaleetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa65 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa65() throws SailoException {    // Kappaleet: 65
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(); 
    assertEquals("From: Kappaleet line: 69", 0, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 70", 1, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale2); assertEquals("From: Kappaleet line: 71", 2, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 72", 3, kappaleet.getLkm()); 
    Iterator<Kappale> it = kappaleet.iterator(); 
    assertEquals("From: Kappaleet line: 74", kappale1, it.next()); 
    assertEquals("From: Kappaleet line: 75", kappale2, it.next()); 
    assertEquals("From: Kappaleet line: 76", kappale1, it.next()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 77", 4, kappaleet.getLkm()); 
    kappaleet.lisaa(kappale1); assertEquals("From: Kappaleet line: 78", 5, kappaleet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa182 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa182() throws SailoException,CloneNotSupportedException {    // Kappaleet: 182
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(); 
    kappale1.rekisteroi(); kappale2.rekisteroi(); 
    assertEquals("From: Kappaleet line: 188", 0, kappaleet.getLkm()); 
    kappaleet.korvaaTaiLisaa(kappale1); assertEquals("From: Kappaleet line: 189", 1, kappaleet.getLkm()); 
    kappaleet.korvaaTaiLisaa(kappale2); assertEquals("From: Kappaleet line: 190", 2, kappaleet.getLkm()); 
    Kappale kappale3 = kappale1.clone(); 
    kappale3.aseta(3,"kkk"); 
    Iterator<Kappale> it = kappaleet.iterator(); 
    assertEquals("From: Kappaleet line: 194", true, it.next() == kappale1); 
    kappaleet.korvaaTaiLisaa(kappale3); assertEquals("From: Kappaleet line: 195", 2, kappaleet.getLkm()); 
    it = kappaleet.iterator(); 
    Kappale k0 = it.next(); 
    assertEquals("From: Kappaleet line: 198", kappale3, k0); 
    assertEquals("From: Kappaleet line: 199", true, k0 == kappale3); 
    assertEquals("From: Kappaleet line: 200", false, k0 == kappale1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKappaleetIterator219 
   * @throws SailoException when error
   */
  @Test
  public void testKappaleetIterator219() throws SailoException {    // Kappaleet: 219
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(), kappale2 = new Kappale(); 
    kappale1.rekisteroi(); kappale2.rekisteroi(); 
    kappaleet.lisaa(kappale1); 
    kappaleet.lisaa(kappale2); 
    kappaleet.lisaa(kappale1); 
    StringBuilder ids = new StringBuilder(30); 
    for (Kappale kappale:kappaleet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+kappale.getTunnusNro()); 
    String tulos = " " + kappale1.getTunnusNro() + " " + kappale2.getTunnusNro() + " " + kappale1.getTunnusNro(); 
    assertEquals("From: Kappaleet line: 238", tulos, ids.toString()); 
    ids = new StringBuilder(30); 
    for (Iterator<Kappale>  i=kappaleet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Kappale kappale = i.next(); 
    ids.append(" "+kappale.getTunnusNro()); 
    }
    assertEquals("From: Kappaleet line: 246", tulos, ids.toString()); 
    Iterator<Kappale>  i=kappaleet.iterator(); 
    assertEquals("From: Kappaleet line: 249", true, i.next() == kappale1); 
    assertEquals("From: Kappaleet line: 250", true, i.next() == kappale2); 
    assertEquals("From: Kappaleet line: 251", true, i.next() == kappale1); 
    try {
    i.next(); 
    fail("Kappaleet: 253 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi311 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi311() throws SailoException {    // Kappaleet: 311
    Kappaleet kappaleet = new Kappaleet(); 
    Kappale kappale1 = new Kappale(); kappale1.parse("1|Alex|This For B|Vinyl|"); 
    Kappale kappale2 = new Kappale(); kappale2.parse("2|Guy From Downstairs||Vinyl|"); 
    Kappale kappale3 = new Kappale(); kappale3.parse("3|Sebastian Eric|Not This Time||Tzinah Records|130"); 
    Kappale kappale4 = new Kappale(); kappale4.parse("4|Runy|Ice Queen|digi"); 
    Kappale kappale5 = new Kappale(); kappale5.parse("5|Robag Wruhme|Yes|Digi"); 
    kappaleet.lisaa(kappale1); kappaleet.lisaa(kappale2); kappaleet.lisaa(kappale3); kappaleet.lisaa(kappale4); kappaleet.lisaa(kappale5); 
  } // Generated by ComTest END
}